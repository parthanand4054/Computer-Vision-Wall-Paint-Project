/// Extracts `"payload"` → base-64 → gunzip → pretty-print (if JSON)
private func unpackPayload(from root: Data) -> String? {

    // 1️⃣ Outer JSON
    guard
        let obj = try? JSONSerialization.jsonObject(with: root) as? [String: Any]
    else { return "❌ outer JSON parse failed" }

    guard
        let payloadB64 = obj["payload"] as? String
    else { return "❌ no \"payload\" key in outer JSON" }

    // 2️⃣ Base-64 decode
    guard
        let gzData = Data(base64Encoded: payloadB64)
    else { return "❌ base-64 decode failed (length \(payloadB64.count))" }

    // 3️⃣ Gunzip  ➜  if this fails we’ll try the raw bytes as JSON
    let raw = gzData.gunzip() ?? gzData

    // 4️⃣ Pretty-print if JSON, otherwise dump some stats
    if let pretty = prettyPrintedJSON(from: raw) {
        return "📦 Inner payload (JSON, \(raw.count) bytes)\n\(pretty)"
    } else if let str = String(data: raw, encoding: .utf8), str.isPrintable {
        return "📦 Inner payload (UTF-8 text, \(raw.count) bytes)\n\(str)"
    } else {
        return "📦 Inner payload is \(raw.count) binary bytes (non-JSON/non-UTF-8)"
    }
}




private extension String {
    /// crude check: printable if at least 80 % of chars are ASCII 32…126
    var isPrintable: Bool {
        let printable = filter { $0.asciiValue ?? 0 >= 32 && $0.asciiValue ?? 0 <= 126 }
        return Double(printable.count) / Double(count) > 0.8
    }
}
